name: Deploy API & Web

on:
  workflow_dispatch:
    inputs:
      server_user:
        description: 'SSH username for server'
        required: false
        default: 'ubuntu'
      api_dir:
        description: 'Directory for the API source code'
        required: false
        default: 'api'
      web_dir:
        description: 'Directory for the Web source code'
        required: false
        default: 'web'

jobs:
  build-api:
    uses: ./.github/workflows/build-api.yaml
    with:
      node-version: '["18.20.8"]'
      upload-artifact: true
      api-dir: ${{ inputs.api_dir }}
    secrets: inherit

  build-web:
    runs-on: ubuntu-latest
    needs: build-api
    steps:
      - name: Checkout web repository
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ secrets.WEB_REPO }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          path: ${{ inputs.web_dir }}

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "18.20.8"

      - name: Install dependencies
        run: npm install
        working-directory: ${{ inputs.web_dir }}

      - name: Set production baseURL in axios.js
        run: |
          sed -i.bak 's|baseURL: "http://localhost:3000/",|baseURL: "/",|g' src/axios/axios.js
        working-directory: ${{ inputs.web_dir }}

      - name: Show axios baseURL for verification
        run: grep baseURL src/axios/axios.js
        working-directory: ${{ inputs.web_dir }}

      - name: Build Web (dev/test)
        run: npm run build
        working-directory: ${{ inputs.web_dir }}
        env:
          # TODO: Check if this is needed for web build
          NODE_OPTIONS: --max-old-space-size=4096


  deploy-api:
    runs-on: ubuntu-latest
    needs: build-web
    env:
      # TODO: Use constant for dist
      API_ZIP_NAME: ${{ inputs.api_dir }}-dist.zip
    steps:
      - name: Download API build artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: ${{ inputs.api_dir }}-dist
          path: ${{ inputs.api_dir }}/dist

      - name: Zip dist folder
        run: zip -r ${{ env.API_ZIP_NAME }} dist
        working-directory: ${{ inputs.api_dir }}

      - name: Ensure target directory exists and is writable
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            APP_PATH="/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}"
            sudo mkdir -p $APP_PATH
            sudo chown ${{ inputs.server_user }}:${{ inputs.server_user }} $APP_PATH

      - name: Copy dist.zip to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "${{ inputs.api_dir }}/${{ env.API_ZIP_NAME }}"
          target: "/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}/"
          overwrite: true

      - name: SSH Deploy API
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            APP_PATH="/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}"
            API_DIST_ZIP_FILE="$APP_PATH/${{ inputs.api_dir }}/${{ env.API_ZIP_NAME }}"
            if [ -f $API_DIST_ZIP_FILE ]; then
              sudo unzip -o $API_DIST_ZIP_FILE -d $APP_PATH
            else
              echo "$API_DIST_ZIP_FILE not found!"
              exit 1
            fi

  deploy-web:
    runs-on: ubuntu-latest
    needs: deploy-api
    env:
      WEB_ZIP_NAME: ${{ inputs.web_dir }}-dist.zip
    steps:

      - name: Zip dist contents as client-dist.zip
        run: cd dist && zip -r ../${{ env.WEB_ZIP_NAME }} .
        working-directory: ${{ inputs.web_dir }}

      # TODO: Ensure this is necessary, 1. mkdir, 2. chown
      - name: Ensure web target directory exists and is writable
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            APP_CLIENT_PATH="/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}/client"
            sudo mkdir -p $APP_CLIENT_PATH
            sudo chown ${{ inputs.server_user }}:${{ inputs.server_user }} $APP_CLIENT_PATH

      - name: Copy web-dist.zip to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "${{ inputs.web_dir }}/${{ env.WEB_ZIP_NAME }}"
          target: "/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}/"
          overwrite: true

      - name: SSH Deploy Web
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            APP_PATH="/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}"
            WEB_DIST_ZIP_FILE="$APP_PATH/${{ inputs.web_dir }}/${{ env.WEB_ZIP_NAME }}"
            CLIENT_PATH="$APP_PATH/client"
            if [ -f $WEB_DIST_ZIP_FILE ]; then
              sudo unzip -o $WEB_DIST_ZIP_FILE -d $CLIENT_PATH
            else
              echo "$WEB_DIST_ZIP_FILE not found!"
              exit 1
            fi

  restart-services:
    runs-on: ubuntu-latest
    needs: deploy-web
    steps:
      - name: Restart pm2 and nginx
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}
            pm2 restart ${{ secrets.APP_NAME }} || pm2 start dist/main.js --name ${{ secrets.APP_NAME }}
            sudo systemctl restart nginx
