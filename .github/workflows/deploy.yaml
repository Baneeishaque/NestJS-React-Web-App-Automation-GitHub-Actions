name: Deploy API & Web

on:
  workflow_dispatch:
    inputs:
      server_user:
        description: 'SSH username for server (if deploying to server)'
        required: false
        default: 'ubuntu'
      deploy_target:
        description: 'Where to deploy the application'
        type: choice
        options:
          - server
          - render
        required: true
        default: 'server'
      api_dir:
        description: 'Directory for the API source code'
        required: false
        default: 'api'
      web_dir:
        description: 'Directory for the Web source code'
        required: false
        default: 'web'

jobs:
  # monitor-ghcr-usage:
  #   runs-on: ubuntu-latest
  #   if: github.event.inputs.deploy_target == 'render'
  #   steps:
  #     - name: Check GHCR Usage and Limits
  #       env:
  #         GH_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
  #       run: |
  #         echo "Fetching GHCR usage statistics..."
  #         # Note: The GitHub API endpoint for package billing is not perfectly clear about free tier bandwidth.
  #         # 'total_gigabytes_bandwidth_used' refers to storage.
  #         # 'total_paid_gigabytes_bandwidth_used' refers to paid data transfer.
  #         # We will check storage against the 0.5GB limit and assume the second value can be checked against the 1GB limit,
  #         # with a warning that it may not be representative of free tier usage.
  #         usage_data=$(gh api /users/${{ github.repository_owner }}/settings/billing/packages)

  #         if [ -z "$usage_data" ] || [ "$(echo "$usage_data" | jq '.total_gigabytes_bandwidth_used')" == "null" ]; then
  #           echo "::warning::Could not fetch usage data. This is normal if you have not set up a billing account (even for free usage). Skipping usage check."
  #           exit 0
  #         fi

  #         storage_used_gb=$(echo "$usage_data" | jq '.total_gigabytes_bandwidth_used')
  #         bandwidth_used_gb=$(echo "$usage_data" | jq '.total_paid_gigabytes_bandwidth_used')

  #         storage_threshold_gb=0.475 # 95% of 0.5 GB
  #         bandwidth_threshold_gb=0.95 # 95% of 1.0 GB

  #         echo "--- GHCR Usage Report ---"
  #         echo "Storage: ${storage_used_gb} GB / 0.5 GB (Free Tier)"
  #         echo "Data Transfer (Paid): ${bandwidth_used_gb} GB / 1.0 GB (Free Tier Limit, this value may not reflect free usage)"
  #         echo "-------------------------"

  #         if (( $(echo "$storage_used_gb > $storage_threshold_gb" | bc -l) )); then
  #           echo "::error::Storage usage (${storage_used_gb} GB) exceeds 95% of the free tier limit (${storage_threshold_gb} GB)."
  #           exit 1
  #         else
  #           echo "Storage usage is within limits."
  #         fi

  #         if (( $(echo "$bandwidth_used_gb > $bandwidth_threshold_gb" | bc -l) )); then
  #           echo "::error::Data transfer usage (${bandwidth_used_gb} GB) exceeds 95% of the free tier limit (${bandwidth_threshold_gb} GB)."
  #           exit 1
  #         else
  #           echo "Data transfer usage is within limits."
  #         fi

  build-api:
    uses: ./.github/workflows/build-api.yaml
    with:
      node-version: '["18.20.8"]'
      upload-artifact: true
      api-dir: ${{ inputs.api_dir }}
    secrets: inherit

  build-web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout web repository
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ secrets.WEB_REPO }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          path: ${{ inputs.web_dir }}
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: "18.20.8"

      # TODO: Cache node modules
      - name: Install dependencies
        run: npm install
        working-directory: ${{ inputs.web_dir }}

      - name: Set production baseURL in axios.js
        run: |
          sed -i.bak "s|baseURL: 'http://localhost:3000/'|baseURL: '/'|g" src/axios/axios.js
          echo "--- Verifying baseURL after replacement ---"
          grep baseURL src/axios/axios.js
        working-directory: ${{ inputs.web_dir }}

      - name: Build Web (dev/test)
        run: npm run build
        working-directory: ${{ inputs.web_dir }}
        env:
          # TODO: Check if this is needed for web build
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload Web project artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ inputs.web_dir }}-dist
          path: ${{ inputs.web_dir }}/dist


  deploy-api-to-server:
    runs-on: ubuntu-latest
    needs: [build-web, build-api]
    if: inputs.deploy_target == 'server'
    env:
      # TODO: Use constant for dist
      API_ZIP_NAME: ${{ inputs.api_dir }}-dist.zip
    steps:
      - name: Download API build artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: ${{ inputs.api_dir }}-dist
          path: ${{ inputs.api_dir }}/dist

      - name: Zip dist folder
        run: zip -r ${{ env.API_ZIP_NAME }} dist
        working-directory: ${{ inputs.api_dir }}

      - name: Ensure target directory exists and is writable
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            APP_PATH="/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}"
            sudo mkdir -p $APP_PATH
            sudo chown ${{ inputs.server_user }}:${{ inputs.server_user }} $APP_PATH

      - name: Copy dist.zip to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "${{ inputs.api_dir }}/${{ env.API_ZIP_NAME }}"
          target: "/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}/"
          overwrite: true

      - name: SSH Deploy API
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            APP_PATH="/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}"
            API_DIST_ZIP_FILE="$APP_PATH/${{ inputs.api_dir }}/${{ env.API_ZIP_NAME }}"
            if [ -f $API_DIST_ZIP_FILE ]; then
              sudo unzip -o $API_DIST_ZIP_FILE -d $APP_PATH
            else
              echo "$API_DIST_ZIP_FILE not found!"
              exit 1
            fi

  deploy-web-to-server:
    runs-on: ubuntu-latest
    needs: deploy-api-to-server
    if: inputs.deploy_target == 'server'
    env:
      WEB_ZIP_NAME: ${{ inputs.web_dir }}-dist.zip
    steps:
      - name: Download Web project artifact
        uses: actions/download-artifact@v5.0.0
        with:
          name: ${{ inputs.web_dir }}-dist
          path: ${{ inputs.web_dir }}/dist

      - name: Zip dist contents as client-dist.zip
        run: cd dist && zip -r ../${{ env.WEB_ZIP_NAME }} .
        working-directory: ${{ inputs.web_dir }}

      # TODO: Ensure this is necessary, 1. mkdir, 2. chown
      - name: Ensure web target directory exists and is writable
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            APP_CLIENT_PATH="/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}/client"
            sudo mkdir -p $APP_CLIENT_PATH
            sudo chown ${{ inputs.server_user }}:${{ inputs.server_user }} $APP_CLIENT_PATH

      - name: Copy web-dist.zip to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "${{ inputs.web_dir }}/${{ env.WEB_ZIP_NAME }}"
          target: "/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}/"
          overwrite: true

      - name: SSH Deploy Web
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            APP_PATH="/home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}"
            WEB_DIST_ZIP_FILE="$APP_PATH/${{ inputs.web_dir }}/${{ env.WEB_ZIP_NAME }}"
            CLIENT_PATH="$APP_PATH/client"
            if [ -f $WEB_DIST_ZIP_FILE ]; then
              sudo unzip -o $WEB_DIST_ZIP_FILE -d $CLIENT_PATH
            else
              echo "$WEB_DIST_ZIP_FILE not found!"
              exit 1
            fi

  restart-server-services:
    runs-on: ubuntu-latest
    needs: deploy-web-to-server
    if: inputs.deploy_target == 'server'
    steps:
      - name: Restart pm2 and nginx
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ inputs.server_user }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/${{ inputs.server_user }}/${{ secrets.APP_NAME }}
            pm2 restart ${{ secrets.APP_NAME }} || pm2 start dist/main.js --name ${{ secrets.APP_NAME }}
            sudo systemctl restart nginx

  deploy-to-render:
    runs-on: ubuntu-latest
    # needs: [monitor-ghcr-usage, build-web, build-api]
    needs: [build-web, build-api]
    if: inputs.deploy_target == 'render'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout API Repository
        id: checkout-api
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.API_REPO }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          path: ${{ inputs.api_dir }}
          fetch-depth: 1

      - name: Checkout Web Repository
        id: checkout-web
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.WEB_REPO }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          path: ${{ inputs.web_dir }}
          fetch-depth: 1

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags and labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ secrets.IMAGE_NAME }}
          tags: |
            type=raw,value=api-${{ steps.checkout-api.outputs.short_commit }}-web-${{ steps.checkout-web.outputs.short_commit }}
            type=raw,value=latest,enable=${{ steps.checkout-api.outputs.branch == 'main' }} # Enable latest tag only if api branch is main
          labels: |
            api-repo-sha=${{ steps.checkout-api.outputs.commit }}
            web-repo-sha=${{ steps.checkout-web.outputs.commit }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # TODO: Cache Render CLI between runs
      - name: Install Render CLI
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install render --HEAD

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render deploys create ${{ secrets.RENDER_SERVICE_ID }} --image ${{ steps.build-and-push.outputs.digest }}
