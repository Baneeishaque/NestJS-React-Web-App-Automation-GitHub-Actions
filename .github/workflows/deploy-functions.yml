name: Deploy Supabase Edge Functions and Manage Webhooks

on:
  push:
    branches:
      - main
    paths:
      - 'supabase/functions/**'
      - 'scripts/**'
  
  pull_request:
    branches:
      - main
    paths:
      - 'supabase/functions/**'
      - 'scripts/**'
  
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Find and deploy all Supabase functions
        if: github.event_name != 'pull_request'
        run: |
          # List all function directories
          cd supabase/functions
          for func_dir in */; do
            # Remove trailing slash
            func_name=${func_dir%/}
            echo "Deploying function: $func_name"

            # Deploy the function
            supabase functions deploy "$func_name" --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}

            # Check if deployment was successful
            if [ $? -eq 0 ]; then
              echo "✅ Successfully deployed $func_name"
            else
              echo "❌ Failed to deploy $func_name"
              exit 1
            fi
          done
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Dry run Supabase functions (PR only)
        if: github.event_name == 'pull_request'
        run: |
          cd supabase/functions
          echo "Running dry run for functions:"
          for func_dir in */; do
            func_name=${func_dir%/}
            echo "- $func_name"
            supabase functions deploy "$func_name" --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --dry-run || echo "Dry run check for $func_name completed"
          done
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: Check if github-webhook function exists
        id: check-webhook
        run: |
          if [ -d "supabase/functions/github-webhook" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "GitHub webhook function exists, will manage webhooks"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "GitHub webhook function does not exist, skipping webhook management"
          fi

      - name: Setup Node.js (for webhook management)
        if: steps.check-webhook.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies for webhook management
        if: steps.check-webhook.outputs.exists == 'true'
        run: cd scripts && npm install

      - name: Manage Repository Webhooks
        if: steps.check-webhook.outputs.exists == 'true'
        env:
          DRY_RUN: ${{ github.event_name == 'pull_request' }}
        run: cd scripts && npm run manage-webhooks