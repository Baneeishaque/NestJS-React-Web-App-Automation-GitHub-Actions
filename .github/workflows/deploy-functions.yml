name: Deploy Supabase Edge Functions and Manage Webhooks

on:
  push:
    branches:
      - main
    paths:
      - 'supabase/functions/**'
      - 'scripts/**'

  pull_request:
    branches:
      - main
    paths:
      - 'supabase/functions/**'
      - 'scripts/**'

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Clone private configuration repository
        run: |
          PRIVATE_REPO_HOSTING_PROVIDER="${{ secrets.PRIVATE_REPO_HOSTING_PROVIDER }}"
          PRIVATE_REPO_OWNER="${{ secrets.PRIVATE_REPO_OWNER }}"
          PRIVATE_REPO_NAME="${{ secrets.PRIVATE_REPO_NAME }}"
          PRIVATE_REPO_ACCESS_TOKEN="${{ secrets.PRIVATE_REPO_ACCESS_TOKEN }}"

          CLONE_URL="https://${PRIVATE_REPO_OWNER}:${PRIVATE_REPO_ACCESS_TOKEN}@${PRIVATE_REPO_HOSTING_PROVIDER}/${PRIVATE_REPO_OWNER}/${PRIVATE_REPO_NAME}.git"

          GIT_LFS_SKIP_SMUDGE=1 git clone --depth=1 --quiet "$CLONE_URL" private-config 2>/dev/null
          echo "Private configuration repository cloned successfully"
        shell: bash

      - name: Install PowerShell Preview
        uses: PSModule/install-powershell@v1
        if: ${{ env.ACT == true }}
        with:
          Version: 7.5.2

      - name: Replace example files with actual configuration files
        run: |
          if (Test-Path private-config -PathType Container) {
            Write-Host "Configuration folder found: private-config"
            & ".\powershell_scripts\create-config-links.ps1" -ConfigFolder private-config -ReferenceFolder "."
          } else {
            Write-Error "Configuration repository private-config not found"
            exit 1
          }
        shell: pwsh

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: 1.110.1

      - name: Find and deploy all Supabase functions
        if: github.event_name != 'pull_request'
        run: |
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        shell: bash

      - name: Dry run Supabase functions (PR only)
        if: github.event_name == 'pull_request'
        run: |
          supabase functions deploy --project-ref INVALID_SUPABASE_PROJECT_REF
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        shell: bash

      - name: Check if github-webhook function exists
        id: check-webhook
        run: |
          if [ -d "supabase/functions/github-webhook" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "GitHub webhook function exists, will manage webhooks"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "GitHub webhook function does not exist, skipping webhook management"
          fi
        shell: bash

      - name: Setup Node.js (for webhook management)
        if: steps.check-webhook.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies for webhook management
        if: steps.check-webhook.outputs.exists == 'true'
        run: cd scripts && npm install

      - name: Manage Repository Webhooks
        if: steps.check-webhook.outputs.exists == 'true'
        env:
          DRY_RUN: ${{ github.event_name == 'pull_request' }}
        run: cd scripts && cat .env && npm run manage-webhooks
